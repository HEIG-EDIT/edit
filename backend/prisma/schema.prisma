// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  userName        String    @unique
  email           String    @unique
  passwordHash    String?
  isEmailVerified Boolean
  twoFaMethod     String? // 'totp' | 'email'
  twoFaSecret     String? // needed for TOTP verification
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @updatedAt

  refreshToken           RefreshToken[]          @relation()
  emailVerificationToken EmailVerificationToken? @relation()
  twoFaChallenge         TwoFaChallenge[]

  projects       Project[]
  collaborations Collaboration[]
  auditLogs      AuditLog[]
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  tokenHash     String   @unique
  deviceId      String
  oauthProvider String?
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  updatedAt     DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, deviceId]) // one token per device per user
  @@index([userId])
  @@index([expiresAt]) // optional: helps cleanup jobs
}

model EmailVerificationToken {
  id        Int       @id @default(autoincrement())
  tokenHash String    @unique
  deviceId  String?   @unique
  createdAt DateTime? @default(now())
  expiresAt DateTime
  usedAt    DateTime?

  user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int?  @unique
}

model TwoFaChallenge {
  id         Int       @id @default(autoincrement())
  tokenHash  String    @unique
  userId     Int
  action     String // 'enable2fa' | 'disable2fa' | 'login' | 'changePassword' | 'passwordRecovery'
  method     String // 'totp' | 'email'
  secret     String? // provisional TOTP secret for ENABLE flow only
  codeHash   String? // hashed email/sms code if used
  createdAt  DateTime  @default(now())
  expiresAt  DateTime
  verifiedAt DateTime?
  usedAt     DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model AuditLog {
  id        Int      @id @default(autoincrement())
  eventType String
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user   User @relation(fields: [userId], references: [id])
  userId Int
}

model Project {
  id                   Int       @id @default(autoincrement())
  createdAt            DateTime  @default(now())
  openedAt             DateTime?
  lastSavedAt          DateTime?
  s3Url                String
  projectJson          String
  userCurrentlyEditing Boolean   @default(false)

  collaborations Collaboration[]
  creator        User            @relation(fields: [creatorId], references: [id])
  creatorId      Int
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  collaborations Collaboration[]
}

model Collaboration {
  id        Int      @id @default(autoincrement())
  createdAt DateTime

  user   User @relation(fields: [userId], references: [id])
  userId Int

  project   Project @relation(fields: [projectId], references: [id])
  projectId Int

  roles Role[]
}
