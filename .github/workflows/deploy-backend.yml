name: Deploy Backend on AWS EC2

on:
  push:
    branches: ["main"]
    paths: ["backend/**"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: heig-edit/edit/backend
  CONTAINER_NAME: backend-container

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: type=sha

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}

  deploy:
    needs: build-and-push-image
    runs-on: [ec2]
    steps:
      - name: Log in to the GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull backend image from GHCR
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{needs.build-and-push-image.outputs.image-tag}}

      - name: Stop and remove old backend container
        run: docker rm -f ${{ env.CONTAINER_NAME }} || true

      - name: Run new backend container
        run: |
          docker run -d --restart=always \
            -p 4000:4000 \
            --name ${{ env.CONTAINER_NAME }} \
            -e AWS_REGION=${{ secrets.AWS_REGION }} \
            -e AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            -e AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
            -e AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }} \
            -e DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{needs.build-and-push-image.outputs.image-tag}}

      - name: Remove old images
        run: docker image prune -af

      # Run Prisma migrations on RDS
      - name: Run Prisma migrations
        run: |
          docker run --rm \
            -e DATABASE_URL=${{ secrets.DATABASE_URL_PROD }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{needs.build-and-push-image.outputs.image-tag}} \
            npx prisma migrate deploy
